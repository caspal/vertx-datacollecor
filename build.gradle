apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse'

apply from: 'dependencies.gradle'
// check if gradle.properties is available
if (project.hasProperty('ossrhUsername')) {
  apply from: 'maven.gradle'
}

eclipse {
  project {
    name = 'vertx-datacollector'
  }
  jdt {
    sourceCompatibility=1.8
    targetCompatibility=1.8
  }
}

task allDocs(group: 'documentation', type: Javadoc) {
  sourceSets.main.java.srcDir "${projectDir}/src/generated/java"

  source = sourceSets.main.java.srcDirs
  classpath = sourceSets.main.compileClasspath
  destinationDir = file("${projectDir}/docs")
}

test {
  dependsOn 'cleanTest'

  sourceSets.test.java.srcDir "${projectDir}/src/generated/java"
  testLogging {
    events = ["passed", "skipped", "failed", "standardOut", "standardError"]
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.5'
}

task createSourceDirectories(group: 'ide',
    description: 'Generate source directories') {
  description 'make all dirs for project setup'
  doLast {
    def sources = [
      sourceSets.main,
      sourceSets.test
    ]
    sources*.allSource*.srcDirs.flatten().each { File srcDir ->
      println "making $srcDir"
      srcDir.mkdirs()
    }
  }
}

// Generate Service Proxies stuff

sourceSets {
    generated{
        java.srcDir "${projectDir}/src/generated/java"
    }
}

task generateProxies(type: JavaCompile, group: 'build', 
             description: 'Generates the Vertx proxies') {
    source = sourceSets.main.java // input source set
    classpath = configurations.compile //+ configurations.vertx // add processor module to classpath
    // specify javac arguments
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor", // vertx processor here
            "-Acodegen.output=${projectDir}/src/main"
    ]
    // specify output of generated code
    destinationDir = file("${projectDir}/src/generated/java")
}
